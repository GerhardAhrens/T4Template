<#@ template debug="true" hostspecific="true" language="C#" #> 
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Data.dll" #>
<#@ Assembly Name="System.Data.DataSetExtensions.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#
string templateCompany = "Lifeprojects.de";
string templateEMail = "developer@lifeprojects.de";
string templateVersion = "1.0";
string classNamespace = "TemplateProject.Class";
string className = "DemoModel";
string root = new DirectoryInfo(Host.ResolvePath("")).Parent.FullName;
root = Path.Combine(root,"TemplateOut",$"{className}.cs");
string templateFileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
string importFile = @"e:\PTA2890\_Development\Sourcen\T4TemplateExamples\T4Template\T4Template\InputFile\DemoModel.csv";
DataTable schemaDt = ImportSchemaFromCSV(importFile,new string[] {";" });
#>

//-----------------------------------------------------------------------
// <copyright file="<#= className #>.cs" company="<#= templateCompany #>">
//     Class: <#= className #>
//     Copyright © <#= templateCompany #> <#= DateTime.Now.Year #>
// </copyright>
//
// <author>Gerhard Ahrens - <#= templateCompany #></author>
// <email><#= templateEMail #></email>
// <date><#= DateTime.Now.ToShortDateString() #></date>
// <Template-Version><#= templateVersion #></Template-Version>
//
// <summary>
// Class for
// </summary>
// <auto-generated>
//  Dieser Code wurde vom T4 Template-Generator generiert.
//
//  Änderungen an dieser Datei '<#= className #>.cs' können falsches Verhalten verursachen
//  und gehen verloren, wenn der Code erneut generiert wird. Es ist allerdings möglich zusätzliche 
//  Anpassunge in einer weiteren Klasse-Datei durch 'partial class <#= className #>' durchzuführen.
// </auto-generated>
//-----------------------------------------------------------------------

namespace <#= classNamespace #>
{
    using System;
    using System.Diagnostics;

    [DebuggerNonUserCode]
    [DebuggerStepThrough]
    public partial class <#= className #>
    {
        public <#= className #>()
        {
        }

        <#foreach(DataRow dr in schemaDt.Rows) {#>
        <#
          string name = dr["Columnname"].ToString();
          string type = dr["Columntyp"].ToString();
          string length = dr["Size"].ToString();
          string columnDescription = dr["Description"].ToString();
        #>

        <#if (Convert.ToInt32(length) == -1){#>
        /* Fieldname: <#= name #>; Datentyp: <#= name #>; Beschreibung: <#= columnDescription #>*/
        <# }else { #>
        /* Fieldname: <#= name #>; Datentyp: <#= name #>; Länge: <#= length #>; Beschreibung: <#= columnDescription #>*/
        <# } #>
        public <#= type #> <#= name #> { get; set; }
        <#} #>
    }
}

<#
SaveOutput(root);
#>

<#+
private void SaveOutput(string filename)
{
    File.Delete(filename);
    File.WriteAllText(filename, GenerationEnvironment.ToString().Trim());
    GenerationEnvironment.Clear();
}

private DataTable ImportSchemaFromCSV(string fullPath, string[] sepString)
{
    DataTable dt = new DataTable();
    using (StreamReader sr = new StreamReader(fullPath))
    {
        //stream uses using statement because it implements iDisposable
        string firstLine = sr.ReadLine();
        var headers = firstLine.Split(sepString, StringSplitOptions.None);
        foreach (var header in headers)
        {
            dt.Columns.Add(header);
        }

        int columnInterval = headers.Count();
        string newLine = sr.ReadLine();
        while (newLine != null)
        {
            var fields = newLine.Split(sepString, StringSplitOptions.None);
            var currentLength = fields.Count();
            if (currentLength < columnInterval)
            {
                while (currentLength < columnInterval)
                {
                    newLine += sr.ReadLine();
                    currentLength = newLine.Split(sepString, StringSplitOptions.None).Count();
                }
                fields = newLine.Split(sepString, StringSplitOptions.None);
            }

            if (currentLength > columnInterval)
            {
                newLine = sr.ReadLine();
                continue;
            }

            dt.Rows.Add(fields);
            newLine = sr.ReadLine();
        }
        sr.Close();
    }

    return dt;
}
#>
